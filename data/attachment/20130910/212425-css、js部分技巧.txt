一、当文字与图片在一行，需要将文字与图片底对齐，需要这样写：

<li>记住密码<img src="" align="bottom" style="margin-bottom:-4px"/></li>

 

二、当文字与图片在一行，需要将文字与图片居中对齐，需要这样写：

<li>记住密码<img src="static/img/xyx.jpg" align="middle"/></li>

 

三、更改IE“查看源代码”菜单打开的编辑器

    打开注册表编辑器,在开始-运行中输入regedit
    找到以下位置： HKEY_LOCAL_MACHINE"SOFTWARE"Microsoft"Internet Explorer"View SourceEditor"Editor Name"修改默认的数据为"D:"Program Files"EmEditor"EmEditor.exe"
    切换到IE中查看源代码就可以看到效果了。
    如果View Source Editor"Editor Name项没有,可以自己新建。

四、自动最大化窗口，在 <body> 与 </body> 之间加入：

<SCRIPT language="javascript">
setTimeout('top.moveTo(0,0)',5000);
setTimeout('top.resizeTo(screen.availWidth,screen.availHeight)',5000);
</script>

 

五、window.opener 实际上就是用window.open打开的窗体的父窗体。

比如在父窗体parentForm里面 通过 window.open("subForm.html"),那么在subform.html中 window.opener

就代表parentForm,可以通过这种方式设置父窗体的值或者调用js方法。

1,window.opener.test(); ---调用父窗体中的test()方法；

2,如果window.opener存在,设置parentForm中stockBox的值。

  if (window.opener && !window.opener.closed)

    {

       window.opener.document.parentForm.stockBox.value = symbol;

    }

六、刷新页面的方法

Javascript刷新页面的方法：
1    history.go(0)
2    location.reload()
3    location=location
4    location.assign(location)
5    document.execCommand('Refresh')
6    window.navigate(location)
7    location.replace(location)
8    document.URL=location.href


自动刷新页面的方法:
1.页面自动刷新：把<meta http-equiv="refresh" content="20">加入<head>区域中

2.页面自动跳转：把<meta http-equiv="refresh" content="20;url=http://www.wyxg.com">加入<head>区域中

3.js自动刷新页面
<script language="JavaScript">
function myrefresh()
{
       window.location.reload();
}
setTimeout('myrefresh()',1000); //指定1秒刷新一次
</script>

4.JS刷新框架

 a)刷新包含该框架的页面用  
<script language=JavaScript>
   parent.location.reload();
</script>  

 b)子窗口刷新父窗口
<script language=JavaScript>
    self.opener.location.reload();
</script>
(　或　<a href="javascript:opener.location.reload()">刷新</a>   )

 c)刷新另一个框架的页面
<script language=JavaScript>
   parent.另一FrameID.location.reload();
</script>

七、用过CSS hack应该知道，用下划线命名是一种hack，如使用“_style”这样的命名，可以让IE外的大部分浏览器忽略这个样式的定义，所以使用“_”做为命名时的分隔符是不规范的。在做CSS检查时会出现错误提示。

 

八、IE条件注释写法

<!--[if !IE]>除IE外都可识别<![endif]-->
<!--[if IE]> 所有的IE可识别 <![endif]-->
<!--[if IE 5.0]> 只有IE5.0可以识别 <![endif]-->

 

九、CSS HACK 写法

 
第一种：
.div {
background:orange;
*background:green !important;
*background:blue;
}
第二种：
.div {
margin:10px;
*margin:15px;
_margin:15px;
}
第三种：
#div { color: #333; }
*+html #div { color: #999; }
* html #div { color: #666; }

 

细节2………………………………………………………………………………

一、IE6及以下不识别a 标签外的:hover伪类，在火狐，IE7里能正确达到效果，解决办法：
#show li.s1{ border:1px solid #ff9900; background:#454242;}
#show li.s2{ border:1px solid #D9D8D8; background:#312E2E;}
<li onMouseOver="this.className='s1'" onMouseOut="this.className='s2'"></li>

 

二、为元素设置hasLayout

很多IE6（或IE7）的问题可以用设置hasLayout值的方法来解决，最简单的给元素设置hasLayout值的方法是给加上CSS 的height或width(当然，zoom也可以用，但这不是CSS的一部分)。比如设置为height:1%。如果父元素没有设置高度，那么元素的物理高度并不会改变，但是，已经具备hasLayout属性。

 

三、IE6下字符重复出现

   确保浮动元素设置了 display:inline;

   在浮动元素中使用 margin-right:-3px;

 

四、样式优先级

1，内联样式 [1.0.0.0]
2，ID选择器 [0.1.0.0]
3，类，属性，伪类 选择器 [0.0.1.0]
4，元素标签，伪元素 选择器 [0.0.0.1]

 

五、一个元素垂直居中的css写法

#exm{
    position:absolute;
    left:50%;
    top:50%;
    z-index:1;
    width:200px;

    height:100px;
    margin-left:-100px;
    margin-top:-52px;
}

 

六、zoom : normal | number
设置或检索对象的缩放比例。设置或更改一个已被呈递的对象的此属性值将导致环绕对象的内容重新流动。虽然此属性不可继承，但是它会影响对象的所有子对象( children )。

 

七、图片跟文字并排时, 要实现图片文字垂直居中:

1> 将line-height:设置成图片的高度,或者图片父元素的高度.
2> 再将图片的CSS设置vertical-align:middle;

 

八、li 元素中包含 a img 元素的时候，IE6下出现空白

解决方法 一

使 li 浮动，并设置 img 为块级元素

解决方法 二

设置 ul 的 font-size:0;

解决方法 三

设置 img 的 vertical-align: bottom;

解决方法 四

设置 img 的 margin-bottom: -5px;

细节3………………………………………………………………………………

一、被点击访问过的超链接样式不在具有hover和active

   解决方法：改变CSS属性的排列顺序: L-V-H-A

 

二、FF下连续长字段不能自动换行

   解决方法：word-wrap:break-word;overflow:hidden;

 

三、FF下父容器高度不能自适应

   解决办法：清除子元素的浮动

 

四、IE下图片下方产生空隙

    解决办法：定义img 为display:block，或vertical-align为top/bottom/middle/text-bottom

             定义父容器的字体大小为零，font-size:0

 

五、IE6下浮动元素和它相邻的非浮动元素之间有3px空隙

    解决办法：相邻的非浮动元素也设置浮动；

             浮动元素相对IE6定义_margin-right:-3px;

 

六、LI内容超长后以省略号显示

    解决办法： white-space:nowrap;(文本不换行)text-overflow:ellipsis; -o-text-overflow:ellipsis; overflow: hidden;

 

七、文本不能垂直居中

     解决办法：行高和容器高度相等line-height=height；

 

八、文本输入框和相邻的文本不能对齐

     解决办法：设置文本输入框vertical-align:middle;

 

九、IE设置滚动条样式

     解决办法：

body{
 scrollbar-face-color:#f6f6f6;
 scrollbar-highlight-color:#fff;
 scrollbar-shadow-color:#eeeeee;
 scrollbar-3dlight-color:#eeeeee;
 scrollbar-arrow-color:#000;
 scrollbar-track-color:#fff;
 scrollbar-darkshadow-color:#fff;
 }

 

十、IE6无法定义高度为1px的容器

     解决办法：overflow:hidden

              zoom:0.8

              line-height:1px


细节4………………………………………………………………………………

一、让层显示在flash之上

    解决办法：给FLASH设置透明<param name="wmode" value="transparent" />或者<param name="wmode" value="opaque" />

 

二、使一个层垂直居中浏览器中

    解决办法：使用百分比绝对定位，与外补丁负值的方法。

    position:absolute;
    top:50%;
    left:50%;
    margin:-100px auto auto -100px;
    width:200px;
    height:200px;

 

三、加入收藏夹

   解决办法：<script type="text/javascript">
// <![CDATA[
function bookmark(){
var title=document.title
var url=document.location.href
if (window.sidebar) window.sidebar.addPanel(title, url,"");
else if( window.opera && window.print ){
var mbm = document.create_r_rElement_x('a');
mbm.setAttribute('rel','sidebar');
mbm.setAttribute('href',url);
mbm.setAttribute('title',title);
mbm.click();}
else if( document.all ) window.external.AddFavorite( url, title);
}
// ]]>
</script>
<a href="javascript:bookmark()">加入收藏夹</a>

 

细节5………………………………………………………………………………

1.常见新闻列表的写法：
<ul class="list">
<li><span>2006年6月6日 </span><a href="http://www.52css.com/#">新闻标题01</a></li>
<li><span>2006年6月6日 </span><a href="http://www.52css.com/#">新闻标题02</a></li>
<li><span>2006年6月6日 </span><a href="http://www.52css.com/#">新闻标题03</a></li>
<li><span>2006年6月6日 </span><a href="http://www.52css.com/#">新闻标题04</a></li>
</ul>

2.IE实现页面背景渐变（FF及chrome不支持）
从上到下：
body{filter: progid:DXImageTransform.Microsoft.Gradient(gradientType=0,startColorStr=#ffffff,endColorStr=#000000);}
左上至右下：
FILTER: Alpha( style=1,opacity=25,finishOpacity=100,startX=50,finishX= 100,startY=50,finishY=100); background-color: skyblue;}
从左至右
body{FILTER: progid:DXImageTransform.Microsoft.Gradient(gradientType=1,startColorStr=#ffffff,endColorStr=#000000);}
从上到下
style="filter:progid:DXImageTransform.microsoft.gradient(gradienttype=0,startColorStr=blue,endColorStr=white);" 

3.a hover的样式实现多种效果，可以灵活运用
#outer a { border:1px solid #069;}
#outer a:hover {border:1px dashed #c00;}

4.border:none;与border:0区别
理论上的性能差异:
border:0;把border设为“0”像素虽然在页面上看不见，但按border默认值理解，浏览器依然对border-width/border-color进行了渲染，即已经占用了内存值。border:none;把border设为“none”即没有，浏览器解析“none”时将不作出渲染动作，即不会消耗内存值。
兼容性差异：
兼容性差异只针对浏览器IE6、IE7与标签button、input而言，在win、win7、vista 的XP主题下均会出现此情况。当border为“none”时似乎对IE6/7无效边框依然存在,当border为“0”时，感觉比“none”更有效，所有浏览器都一致把边框隐藏，
如何让border:none;实现全兼容？只需要在同一选择符上添加背景属性即可

5.css实现多列等高布局,正内边距与负外边距
给每个需要实现等高的列应用样式：.e {padding-bottom: 32767px; margin-bottom: -32767px;}

6.position:relative;特殊用法？？？？
* {margin:0;padding:0;font:normal 12px/25px "宋体";}
body {background:#f8f8f8;}
ul {list-style:none;width:300px;height:25px;margin:20px auto;}
li {float:left;width:86px;height:25px;text-align:center;margin:0 -5px;display:inline;}
a {color:#fff; float:left;width:86px;height:25px;top:0;left:0;background:url(***.gif) center center no-repeat;}
a:hover {color:#000;background:url(***.gif) 0 0 no-repeat;width:86px;position:relative;}


细节6………………………………………………………………………………


1。innerText：从起始位置到结束位置的内容，不包含标签
     innerHTML
   outerHTML:包含 innerHTML和标签
     <div id="test"><span>test1</span>test2</div>
     test.innerText:test1 test2
     test.innerHTML:<span>test1</span>test2
      test.outerHTML:<div id="test"><span>test1</span>test2</div>
    
2。Number（）：任何包含非数字字符的字符串做参数时，结果为NaN 
   parseInt():从左到右尽可能多低把字符串转化为数字，直到遇到一个非数字时停止
   isNaN():参数不是一个数字时，返回true;

3。a=23.50abc
   typeof(a)=String
   parseFloat(a)=23.5
   parseInt(a)=23
   Number(a)=NaN
   
4。JS变量名包含数字字母美元符下划线，不能以数字开头

5。getElementsByTagName_r()需要等文档加载完毕后才能获取到

6。nodeType：共12种，1表示元素节点，3表示文本节点
     nodeName：表示节点名称，如果是文本节点，则表示#text
     nodeValue：表示节点的值
eg: 获取tagname为li的节点if(obj.nodeName.toLowerCase()=='li'){}
      改变P的文本内容  document.getElementsByTagName_r('p')[0].firstchild.nodeValue=''

7。父节点到子节点
     childNodes：元素所有第一层子节点列表，不包括向下更深层次的子节点
     obj.firstChild=obj.childNodes[0]
     obj.lastChild=obj.childNodes[obj.childNodes.length-1]
     hasChildNodes() 判断元素是否有子节点，返回布尔值

7。子节点到父节点
     var parentElm=myLinkItem.parentNode;
     while(parentElm,className!=‘syna’&&parentElm!='document.body')
      parentElm=parentElm.parentNode

8。修改元素属性
   1）以对象属性的方式获取或设置
var mainImage=document.getElementByIdx_x('nav').getElementsByTagName['img'][0];
    mainImage.src='';
    mainImage.alt='';
   2)用getAttribute()和setAttribute()方法


细节7………………………………………………………………………………

1。将数字转化为拥有X位小数位的形式
function roundTo(base,precision)
  { var m=Math.pow(10,precision);
    var a=Math.round(base*m)/m;
    return a;
}
var n=3.942487;
roundTo(n,3)=3.942
roundTo(n,0)=3

2。创建受约束的随机数
function randomBetween(min,max)
{ return min+Math.floor(Math.random()*(max-min+1))}

3。数字转换为字符串
var a=10;
a=String(a);/a=a.toString();

4。对url的编码
var a="http://www.google.com/directoryname/?p=e";
var b=escape(a);
var c=(b);

5。改变文档内元素的类型
p--->div
首先创建一个div元素，然后复制p的子节点到div中，最后再用div 替换p

6。一个函数需要多少参数
function add(n1,n2){}
return num=add.length;

7。一个函数传入了多少参数
function add(n1,n2){
return arguments.length;}


细节8………………………………………………………………………………

1). display:inline-block;顾名思义，就是在内联情况下的块状，可以设定高度宽度。

.element-class { 
display: -moz-inline-stack; //Firefox only code 
display: inline-block; //some standard browsers 
zoom: 1; //IE only 
*display: inline; //Only IE know this code (CSS Hack) 
}

2).清理浮动

.clearfix:after{visibility:hidden;display:block;font-size:0;content:" ";clear:both;height:0;}

.clearfix {zoom:1;} 

3).在地址栏添加自定义图标

   首先，我们需要预先制作一个图标文件，大小为16*16像素。文件扩展名为ico，然后上传到相应目录中。在HTML源文件“<head></head>”之间添加如下代码：<Link Rel=”ICON NAME” href=”http://图片的地址（注意与刚才的目录对应）”>，当然如果用户使用IE5或以上版本浏览时，就更简单了，只需将图片上传到网站根目录下，即可自动识别！

4). 在IE6中设置display:block的空容器一个较小高度时，如<p style=”height:1px;”></p>，会发现其高度不能小于某个值。解决方案：设置overflow:hidden。

5).文字用省略号截断

 

div{width:200px;height:100px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}

div+css 兼容ie6 ie7 ie8 ie9和FireFox Chrome等浏览器方法


1.DOCTYPE 影响 CSS 处理
2.FF: div 设置 margin-left, margin-right 为 auto 时已经居中, IE 不行
3.FF: body 设置 text-align 时, div 需要设置 margin: auto(主要是 margin-left,margin-right) 方可居中
4.FF: 设置 padding 后, div 会增加 height 和 width, 但 IE 不会, 故需要用 !important 多设一个 height 和 width
5.FF: 支持 !important, IE 则忽略, 可用 !important 为 FF 特别设置样式
6.div 的垂直居中问题: vertical-align:middle; 将行距增加到和整个DIV一样高 line-height:200px; 然后插入文字，就垂直居中了。缺点是要控制内容不要换行
7.cursor: pointer 可以同时在 IE FF 中显示游标手指状， hand 仅 IE 可以
8.FF: 链接加边框和背景色，需设置 display: block, 同时设置 float: left 保证不换行。参照 menubar, 给 a 和 menubar 设置高度是为了避免底边显示错位, 若不设 height, 可以在 menubar 中插入一个空格。
9.在mozilla firefox和IE中的BOX模型解释不一致导致相差2px解决方法： div{margin:30px!important;margin:28px;}注意这两个margin的顺序一定不能写反，据阿捷的说法! important这个属性IE不能识别，但别的浏览器可以识别。所以在IE下其实解释成这样： div{maring:30px;margin:28px}重复定义的话按照最后一个来执行，所以不可以只写margin:XXpx! important;
11.ul标签在Mozilla中默认是有padding值的,而在IE中只有margin有值所以先定义 ul{margin:0;padding:0;}就能解决大部分问题

注意事项：

1、float的div一定要闭合。
例如：(其中floatA、floatB的属性已经设置为float:left;) 

<div id=”floatA” ></div>
<div id=”floatB” ></div>
<div id=”NOTfloatC” ></div>
这里的NOTfloatC并不希望继续平移，而是希望往下排。
这段代码在IE中毫无问题，问题出在FF。原因是NOTfloatC并非float标签，必须将float标签闭合。
在

<div class=”floatB”></div>
<div class=”NOTfloatC”></div>
之间加上

<div class=”clear”></div>
这个div一定要注意声明位置，一定要放在最恰当的地方，而且必须与两个具有float属性的div同级，之间不能存在嵌套关系，否则会产生异常。
并且将clear这种样式定义为为如下即可：
.clear{
clear:both;
}
此外，为了让高度能自动适应，要在wrapper里面加上overflow:hidden;
当包含float的box的时候，高度自动适应在IE下无效，这时候应该触发IE的layout私有属性(万恶的IE)用zoom:1;可以做到，这样就达到了兼容。
例如某一个wrapper如下定义：


.colwrapper{
overflow:hidden;
zoom:1;
margin:5px auto;}

2、margin加倍的问题
设置为float的div在ie下设置的margin会加倍。这是一个ie6都存在的bug。
解决方案是在这个div里面加上display:inline;
例如：

<div id=”imfloat”></div>

相应的css为


#IamFloat{
float:left;
margin:5px;/*IE下理解为10px*/
display:inline;/*IE下再理解为5px*/}

3、关于容器的包涵关系
很多时候，尤其是容器内有平行布局，例如两、三个float的div时，宽度很容易出现问题。在IE中，外层的宽度会被内层更宽的div挤破。一定要用Photoshop或者Firework量取像素级的精度。
4、关于高度的问题
如果是动态地添加内容，高度最好不要定义。浏览器可以自动伸缩，然而如果是静态的内容，高度最好定好。（似乎有时候不会自动往下撑开，不知道具体怎么回事）
5、最狠的手段 - !important;
如果实在没有办法解决一些细节问题,可以用这个方法.FF对于”!important”会自动优先解析,然而IE则会忽略.如下 


.tabd1{
background:url(/res/images/up/tab1.gif) no-repeat 0px 0px !important; /*Style for FF*/
background:url(/res/images/up/tab1.gif) no-repeat 1px 0px; /* Style for IE */}

值得注意的是，一定要将xxxx !important 这句放置在另一句之上，上面已经提过
IE7.0对CSS的支持又有新问题。浏览器多了，网页兼容性更差了，疲于奔命的还是我们 ，为解决IE7.0的兼容问题，找来了下面这篇文章：


现在我大部分都是用!important来hack，对于ie6和firefox测试可以正常显示，但是ie7对!important可以正确解释，会导致页面没按要求显示！搜索了一下，找到一个针对IE7不错的hack方式就是使用“*+html”，现在用IE7浏览一下，应该没有问题了。
现在写一个CSS可以这样：


#example { color: #333; } /* Moz */
* html #example { color: #666; } /* IE6 */
*+html #example { color: #999; } /* IE7 */

那么在firefox下字体颜色显示为#333，IE6下字体颜色显示为#666，IE7下字体颜色显示为#999.



关于CSS对各个浏览器兼容已经是老生常谈的问题了, 网络上的教程遍地都是.以下内容没有太多新颖, 纯属个人总结, 希望能对初学者有一定的帮助.
一、CSS HACK以下两种方法几乎能解决现今所有HACK.

1, !important

随着IE7对!important的支持, !important 方法现在只针对IE6的HACK.(注意写法.记得该声明位置需要提前.)

<style>
#wrapper
{
width: 100px!important; /* IE7+FF */
width: 80px; /* IE6 */
}
</style>


2, IE6/IE77对FireFox

*+html 与 *html 是IE特有的标签, firefox 暂不支持.而*+html 又为 IE7特有标签.

<style>
#wrapper
{
#wrapper { width: 120px; } /* FireFox */
*html #wrapper { width: 80px;} /* ie6 fixed */
*+html #wrapper { width: 60px;} /* ie7 fixed, 注意顺序 */
}
</style>


注意:
*+html 对IE7的HACK 必须保证HTML顶部有如下声明：

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"　"http://www.w3.org/TR/html4/loose.dtd">

二、万能 float 闭合
关于 clear float 的原理可参见 [How To Clear Floats Without Structural Markup]
将以下代码加入Global CSS 中,给需要闭合的div加上 class="clearfix" 即可,屡试不爽.


<style>
/* Clear Fix */

.clearfix:after
{
content:".";
display:block;
height:0;
clear:both;
visibility:hidden;
}
.clearfix
{
display:inline-block;
}
/* Hide from IE Mac */
.clearfix {display:block;}
/* End hide from IE Mac */
/* end of clearfix */
</style>



三、其他兼容技巧
1, FF下给 div 设置 padding 后会导致 width 和 height 增加, 但IE不会.(可用!important解决)
2, 居中问题.
1).垂直居中.将 line-height 设置为 当前 div 相同的高度, 再通过 vertical-align: middle.( 注意内容不要换行.)
2).水平居中. margin: 0 auto;(当然不是万能)
3, 若需给 a 标签内内容加上 样式, 需要设置 display: block;(常见于导航标签)
4, FF 和 IE 对 BOX 理解的差异导致相差 2px 的还有设为 float的div在ie下 margin加倍等问题.
5, ul 标签在 FF 下面默认有 list-style 和 padding . 最好事先声明, 以避免不必要的麻烦. (常见于导航标签和内容列表)
6, 作为外部 wrapper 的 div 不要定死高度, 最好还加上 overflow: hidden.以达到高度自适应.
7, 关于手形光标. cursor: pointer. 而hand 只适用于 IE.

1 针对firefox ie6 ie7的css样式 
现在大部分都是用!important来hack，对于ie6和firefox测试可以正常显示，
但是ie7对!important可以正确解释，会导致页面没按要求显示！找到一个针
对IE7不错的hack方式就是使用“*+html”，现在用IE7浏览一下，应该没有问题了。 
现在写一个CSS可以这样： 


#1 { color: #333; } /* Moz */ 
* html #1 { color: #666; } /* IE6 */ 
*+html #1 { color: #999; } /* IE7 */

那么在firefox下字体颜色显示为#333，IE6下字体颜色显示为#666，IE7下字体颜色显示为#999。

2 css布局中的居中问题 
主要的样式定义如下：


body {TEXT-ALIGN: center;}
#center { MARGIN-RIGHT: auto; MARGIN-LEFT: auto; }

说明：
首先在父级元素定义TEXT-ALIGN: center;这个的意思就是在父级元素内的内容居中；对于IE这样设定就已经可以了。但在mozilla中不能居中。解决办法就是在子元素定义时候设定时再加上“MARGIN-RIGHT: auto;MARGIN-LEFT: auto; ”需要说明的是，如果你想用这个方法使整个页面要居中，建议不要套在一个DIV里，你可以依次拆出多个div，只要在每个拆出的div里定义MARGIN-RIGHT: auto;MARGIN-LEFT: auto; 就可以了。

3 盒模型不同解释


#box{ width:600px; //for ie6.0- w\idth:500px; //for ff+ie6.0}
#box{ width:600px!important //for ff width:600px; //for ff+ie6.0 width /**/:500px; //for ie6.0-} 

4 浮动ie产生的双倍距离


#box{ float:left; width:100px; margin:0 0 0 100px; //这种情况之下IE会产生200px的距离 
display:inline; //使浮动忽略}这里细说一下block,inline两个元素,Block元素的特点是:总是在新行上开始,高度,宽度,行高,边距都可以控制(块元素);Inline元素的特点是:和其他元素在同一行上,...不可控制(内嵌元素);
#box{ display:block; //可以为内嵌元素模拟为块元素 display:inline; //实现同一行排列的的效果 
diplay:table;

IE不认得min-这个定义，但实际上它把正常的width和height当作有min的情况来使。这样问题就大了，如果只用宽度和高度，
正常的浏览器里这两个值就不会变，如果只用min-width和min-height的话，IE下面根本等于没有设置宽度和高度。
比如要设置背景图片，这个宽度是比较重要的。要解决这个问题，可以这样：


#box{ width: 80px; height: 35px;}html>body #box{ width: auto; height: auto; min-width: 80px; min-height: 35px;}

6 页面的最小宽度

min-width是个非常方便的CSS命令，它可以指定元素最小也不能小于某个宽度，这样就能保证排版一直正确。但IE不认得这个，
而它实际上把width当做最小宽度来使。为了让这一命令在IE上也能用，可以把一个div放到body 标签下，然后为div指定一个类：
然后CSS这样设计：

#container{ min-width: 600px; width:expression(document.body.clientWidth < 600? "600px": "auto" );}
第一个min-width是正常的；但第2行的width使用了Javascript，这只有IE才认得，这也会让你的HTML文档不太正规。它实际上通过Javascript的判断来实现最小宽度。

7 清除浮动

.hackbox{ display:table; //将对象作为块元素级的表格显示}或者.hackbox{ clear:both;}
或者加入:after（伪对象）,设置在对象后发生的内容，通常和content配合使用，IE不支持此伪对象，非Ie 浏览器支持，
所 以并不影响到IE/WIN浏览器。这种的最麻烦的......#box:after{ content: "."; display: block; height: 0; clear: both; visibility: hidden;} 

8 DIV浮动IE文本产生3象素的bug

左边对象浮动，右边采用外补丁的左边距来定位，右边对象内的文本会离左边有3px的间距.


#box{ float:left; width:800px;}#left{ float:left; width:50%;}#right{ width:50%;}*html #left{ margin-right:-3px; //这句是关键}
HTML代码
<div id="box"> <div id="left"></div> <div id="right"></div></div>

9 属性选择器(这个不能算是兼容,是隐藏css的一个bug)

p[id]{}div[id]{}
这个对于IE6.0和IE6.0以下的版本都隐藏,FF和OPera作用
属性选择器和子选择器还是有区别的,子选择器的范围从形式来说缩小了,属性选择器的范围比较大,如p[id]中,所有p标签中有id的都是同样式的.

10 IE捉迷藏的问题

当div应用复杂的时候每个栏中又有一些链接，DIV等这个时候容易发生捉迷藏的问题。
有些内容显示不出来，当鼠标选择这个区域是发现内容确实在页面。
解决办法：对#layout使用line-height属性 或者给#layout使用固定高和宽。页面结构尽量简单。

11 高度不适应

高度不适应是当内层对象的高度发生变化时外层高度不能自动进行调节，特别是当内层对象使用
margin 或paddign 时。
例：


<div id="box"> 
<p>p对象中的内容</p> 
</div> 
CSS：#box {background-color:#eee; } 
#box p {margin-top: 20px;margin-bottom: 20px; text-align:center; }

解决方法：在P对象上下各加2个空的div对象CSS代码：.1{height:0px;overflow:hidden;}或者为DIV加上border属性。

/*IE与Firefox的CSS兼容大全*/ 
1.DOCTYPE 影响 CSS 处理 

2.FF: div 设置 margin-left, margin-right 为 auto 时已经居中, IE 不行 

3.FF: body 设置 text-align 时, div 需要设置 margin: auto(主要是 margin-left,margin-right) 方可居中 

4.FF: 设置 padding 后, div 会增加 height 和 width, 但 IE 不会, 故需要用 !important 多设一个 height 和 width 

5.FF: 支持 !important, IE 则忽略, 可用 !important 为 FF 特别设置样式 

6.div 的垂直居中问题: vertical-align:middle; 将行距增加到和整个DIV一样高 line-height:200px; 然后插入文字，就垂直居中了。缺点是要控制内容不要换行 

7.cursor: pointer 可以同时在 IE FF 中显示游标手指状， hand 仅 IE 可以 

8.FF: 链接加边框和背景色，需设置 display: block, 同时设置 float: left 保证不换行。参照 menubar, 给 a 和 menubar 设置高度是为了避免底边显示错位, 若不设 height, 可以在 menubar 中插入一个空格。 

9.在mozilla firefox和IE中的BOX模型解释不一致导致相差2px解决方法： 
div{margin:30px!important;margin:28px;} 
注意这两个margin的顺序一定不能写反，据阿捷的说法!important这个属性IE不能识别，但别的浏览器可以识别。所以在IE下其实解释成这样： 
div{maring:30px;margin:28px} 
重复定义的话按照最后一个来执行，所以不可以只写margin:XXpx!important; 

10.IE5 和IE6的BOX解释不一致 
IE5下 
div{width:300px;margin:0 10px 0 10px;} 
div的宽度会被解释为300px-10px(右填充)-10px(左填充)最终div的宽度为280px，而在IE6和其他浏览器上宽度则是以300px+10px(右填充)+10px(左填充)=320px来计算的。这时我们可以做如下修改 
div{width:300px!important;width /**/:340px;margin:0 10px 0 10px} 
关于这个/**/是什么我也不太明白，只知道IE5和firefox都支持但IE6不支持，如果有人理解的话，请告诉我一声，谢了！：） 

11.ul标签在Mozilla中默认是有padding值的,而在IE中只有margin有值所以先定义 
ul{margin:0;padding:0;} 
就能解决大部分问题 

注意事项： 

1、float的div一定要闭合。 

例如：(其中floatA、floatB的属性已经设置为float:left;)


<#div id="floatA" ></#div> 
<#div id="floatB" ></#div> 
<#div id="NOTfloatC" ></#div> 
这里的NOTfloatC并不希望继续平移，而是希望往下排。 
这段代码在IE中毫无问题，问题出在FF。原因是NOTfloatC并非float标签，必须将float标签闭合。 
在


<#div class="floatB"></#div> 
<#div class="NOTfloatC"></#div> 
之间加上 
<#div class="clear"></#div> 
这个div一定要注意声明位置，一定要放在最恰当的地方，而且必须与两个具有float属性的div同级，之间不能存在嵌套关系，否则会产生异常。 
并且将clear这种样式定义为为如下即可： 
.clear{ 
clear:both;} 
此外，为了让高度能自动适应，要在wrapper里面加上overflow:hidden; 
当包含float的box的时候，高度自动适应在IE下无效，这时候应该触发IE的layout私有属性(万恶的IE啊！)用zoom:1;可以做到，这样就达到了兼容。 
例如某一个wrapper如下定义： 
.colwrapper{ 
overflow:hidden; 
zoom:1; 
margin:5px auto;} 

2、margin加倍的问题。 

设置为float的div在ie下设置的margin会加倍。这是一个ie6都存在的bug。 
解决方案是在这个div里面加上display:inline; 
例如： 


<#div id="imfloat"></#div> 


相应的css为 

#IamFloat{ 
float:left; 
margin:5px;/*IE下理解为10px*/ 
display:inline;/*IE下再理解为5px*/} 

3、关于容器的包涵关系 

很多时候，尤其是容器内有平行布局，例如两、三个float的div时，宽度很容易出现问题。在IE中，外层的宽度会被内层更宽的div挤破。一定要用Photoshop或者Firework量取像素级的精度。 

4、关于高度的问题 

如果是动态地添加内容，高度最好不要定义。浏览器可以自动伸缩，然而如果是静态的内容，高度最好定好。（似乎有时候不会自动往下撑开，不知道具体怎么回事） 

5、最狠的手段 - !important; 

如果实在没有办法解决一些细节问题,可以用这个方法.FF对于"!important"会自动优先解析,然而IE则会忽略.如下 
.tabd1{ 
background:url(/res/images/up/tab1.gif) no-repeat 0px 0px !important; /*Style for FF*/ 
background:url(/res/images/up/tab1.gif) no-repeat 1px 0px; /* Style for IE */}

div+css兼容（二）

2008年04月02日 星期三 上午 10:58


DIV+CSS兼容 IE6 IE7 火狐

在区别火狐和IE时最常用的是!important方法,对于其他不同浏览器和浏览器的不同版本的的兼容性问题还有下面一些方法,比如:@import,注释,属性选择符,子对象选择符和voice-family等方法,这些方法在《css网站布局实录》中有讲述.

下面是IE和火狐的css兼容性问题

1.DOCTYPE 影响 CSS 处理

2.FF: div 设置 margin-left, margin-right 为 auto 时已经居中, IE 不行

3.FF: body 设置 text-align 时, div 需要设置 margin: auto(主要是 margin-left,margin-right) 方可居中

4.FF: 设置 padding 后, div 会增加 height 和 width, 但 IE 不会, 故需要用 !important 多设一个 height 和 width

5.FF: 支持 !important, IE 则忽略, 可用 !important 为 FF 特别设置样式

本文由 站酷网 - pwdesign 原创，转载请保留此信息，多谢合作。